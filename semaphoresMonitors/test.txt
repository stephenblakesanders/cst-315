#include <vector>
#include <IceUtil/IceUtil.h>
// ...
 
Queue q;
 
class ReaderThread : public IceUtil::Thread
{
    virtual void run() 
    {
        for(int i = 0; i < 100; ++i)
        {
            cout << q.get() << endl;
        }
    }
};
 
class WriterThread : public IceUtil::Thread
{
    virtual void run() 
    {
        for(int i = 0; i < 100; ++i)
        {
            q.put(i);
        }
    }
};
 
int
main()
{
    vector<IceUtil::ThreadControl> threads;
    int i;
 
    // Create five reader threads and start them
    //
    for(i = 0; i < 5; ++i)
    {
        IceUtil::ThreadPtr t = new ReaderThread;
        threads.push_back(t->start());
    }
 
    // Create five writer threads and start them
    //
    for(i = 0; i < 5; ++i)
    {
        IceUtil::ThreadPtr t = new WriterThread;
        threads.push_back(t->start());
    }
 
    // Wait for all threads to finish
    //
    for(vector<IceUtil::ThreadControl>::iterator i = threads.begin(); i != threads.end(); ++i)
    {
        i->join();
    }
}





namespace IceUtil
{
    class Time;
 
    class ThreadControl 
    {
    public:
#ifdef _WIN32
        typedef DWORD ID;
#else
        typedef pthread_t ID;
#endif
 
        ThreadControl();
#ifdef _WIN32
        ThreadControl(HANDLE, DWORD);
#else
        ThreadControl(explicit pthread_t);
#endif
        ID id() const;
 
        void join();
        void detach();
 
        static void sleep(const Time&);
        static void yield();
 
        bool operator==(const ThreadControl&) const;
        bool operator!=(const ThreadControl&) const;
 
    };
 
    class Thread :virtual public Shared
    {
    public:
        virtual void run() = 0;
 
        ThreadControl start(size_t stBytes = 0);
        ThreadControl start(size_t stBytes, int priority);
        ThreadControl getThreadControl() const;
        bool isAlive() const;
 
        bool operator==(const Thread&) const;
        bool operator!=(const Thread&) const;
        bool operator<(const Thread&) const;
    };
    typedef Handle<Thread> ThreadPtr;
}
